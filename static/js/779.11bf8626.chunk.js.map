{"version":3,"file":"static/js/779.11bf8626.chunk.js","mappings":"8PAEaA,E,QAAcC,EAAAA,GAAH,kZAEL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEE,SAAAF,GAAC,OAAIA,EAAEC,MAAME,UAAUC,MAAtB,IASM,SAAAJ,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAIL,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,mBCqB1B,EAnCgB,WAEZ,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WAAM,wCAGZ,oGAE0BC,EAAAA,GAAwBH,GAFlD,OAEUI,EAFV,OAIIL,EAAWK,GAJf,4CAHY,0DACZC,EAQH,GAAE,CAACL,IAECF,GAGD,8BACwB,IAAnBA,EAAQQ,QAAe,uBAAG,mCACtB,SAAChB,EAAD,UACIQ,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OAET,2BACI,wBAAKF,KACL,uBAAIC,MAFCC,EAFA,QANR,IAiBxB,C,6MCnCKC,EAAW,gCAGXC,EAAQ,SAIRC,EAAgB,CAClBC,QATY,mCAUZC,SAAU,SAGDC,EAAiB,mCAAG,+FACvBC,EADuB,UACdN,GADc,OAXT,sBAadO,EAAU,CACZC,QAAO,kBAAMN,GAAP,IAAsBO,KAAM,KAHT,kBAOFC,EAAAA,EAAAA,IAAUJ,EAAKC,GAPb,cAOnBI,EAPmB,yBAQlBA,EAASC,KAAKnB,SARI,gCAWzBoB,QAAQC,IAAR,MAXyB,yDAAH,qDAejBC,EAAkB,mCAAG,WAAMC,GAAN,kFACxBV,EADwB,UACfN,GADe,OAzBb,gBA2BXO,EAAU,CACZC,QAAO,kBAAMN,GAAP,IAAsBO,KAAM,EAAGO,MAAAA,KAHX,kBAOHN,EAAAA,EAAAA,IAAUJ,EAAKC,GAPZ,cAOpBI,EAPoB,yBAQnBA,EAASC,KAAKnB,SARK,gCAW1BoB,QAAQC,IAAR,MAX0B,yDAAH,sDAelBG,EAAY,mCAAG,WAAM5B,GAAN,kFAClBiB,EADkB,UACTN,GADS,OACEC,GADF,OACUZ,GAC5BkB,EAAU,CACZC,QAAO,UAAMN,IAHO,kBAOGQ,EAAAA,EAAAA,IAAUJ,EAAKC,GAPlB,cAOdI,EAPc,yBAQbA,EAASC,MARI,gCAWpBC,QAAQC,IAAR,MAXoB,yDAAH,sDAeZI,EAAgB,mCAAG,WAAM7B,GAAN,kFACtBiB,EADsB,UACbN,GADa,OACFC,GADE,OACMZ,GADN,OArDhB,YAuDNkB,EAAU,CACZC,QAAO,UAAMN,IAHW,kBAODQ,EAAAA,EAAAA,IAAUJ,EAAKC,GAPd,cAOlBI,EAPkB,yBAQjBA,EAASC,KAAKO,MARG,gCAWxBN,QAAQC,IAAR,MAXwB,yDAAH,sDAehBpB,EAAmB,mCAAG,WAAML,GAAN,kFACzBiB,EADyB,UAChBN,GADgB,OACLC,GADK,OACGZ,GADH,OAnEnB,YAqENkB,EAAU,CACZC,QAAO,kBAAMN,GAAP,IAAsBO,KAAM,KAHP,kBAOJC,EAAAA,EAAAA,IAAUJ,EAAKC,GAPX,cAOrBI,EAPqB,yBAQpBA,EAASC,KAAKnB,SARM,gCAW3BoB,QAAQC,IAAR,MAX2B,yDAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/Api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n    li {\n        padding: ${p => p.theme.space[3]}px;\n        border-radius: 5px;\n        box-shadow: ${p => p.theme.boxShadow.second};\n        max-height: 300px;\n        overflow-y: scroll;\n\n        @media screen and (max-width: 479.98px) {\n            overflow-x: scroll;\n        }\n\n        &:not(:last-of-type) {\n            margin-bottom: ${p => p.theme.space[2]}px;\n        }\n\n    h3 {\n        margin-bottom: ${p => p.theme.space[2]}px;\n        }\n`;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ReviewsList } from \"./Reviews.styled\";\nimport * as API from '../../services/Api';\n\nconst Reviews = () => {\n\n    const [reviews, setReviews] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        getMovieReviewsById();\n\n        async function getMovieReviewsById() {\n\n            const results = await API.getMovieReviewsById(movieId);\n            // console.log('results Reviews :>> ', results);\n            setReviews(results);\n        }\n    }, [movieId]);\n\n    if (!reviews) return null;\n\n    return (\n        <>\n            {reviews.length === 0 ? <p>We don't have any reviews yet</p> :\n                (<ReviewsList>\n                    {reviews.map(({ author, content, id }) =>\n                    (\n                        <li key={id}>\n                            <h3>{author}</h3>\n                            <p>{content}</p>\n                        </li>\n                    ))}\n                </ReviewsList>)\n            }\n        </>\n    )\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\nconst API_KEY = '70dd3cfa80de1915d6c85a48e09c15b1';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TRENDING_MOVIES = 'trending/movie/day';\nconst SEARCH_MOVIE = 'search/movie';\nconst MOVIE = 'movie/';\nconst CREDITS = '/credits';\nconst REVIEWS = '/reviews';\n\nconst defaultParams = {\n    api_key: API_KEY,\n    language: 'en-US',\n};\n\nexport const getTrendingMovies = async () => {\n    const url = `${BASE_URL}${TRENDING_MOVIES}`;\n    const options = {\n        params: { ...defaultParams, page: 1 }\n    };\n\n    try {\n        const response = await axios.get(url, options);\n        return response.data.results;\n    }\n    catch (error) {\n        console.log(error);\n    }\n};\n\nexport const searchMovieByQuery = async query => {\n    const url = `${BASE_URL}${SEARCH_MOVIE}`;\n    const options = {\n        params: { ...defaultParams, page: 1, query }\n    };\n\n    try {\n        const response = await axios.get(url, options);\n        return response.data.results;\n    }\n    catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getMovieById = async movieId => {\n    const url = `${BASE_URL}${MOVIE}${movieId}`;\n    const options = {\n        params: { ...defaultParams}\n    };\n\n    try {\n        const response = await axios.get(url, options);\n        return response.data;\n    }\n    catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getMovieCastById = async movieId => {\n    const url = `${BASE_URL}${MOVIE}${movieId}${CREDITS}`;\n    const options = {\n        params: { ...defaultParams}\n    };\n\n    try {\n        const response = await axios.get(url, options);\n        return response.data.cast;\n    }\n    catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getMovieReviewsById = async movieId => {\n    const url = `${BASE_URL}${MOVIE}${movieId}${REVIEWS}`;\n    const options = {\n        params: { ...defaultParams, page: 1}\n    };\n\n    try {\n        const response = await axios.get(url, options);\n        return response.data.results;\n    }\n    catch (error) {\n        console.log(error);\n    }\n}"],"names":["ReviewsList","styled","p","theme","space","boxShadow","second","useState","reviews","setReviews","movieId","useParams","useEffect","API","results","getMovieReviewsById","length","map","author","content","id","BASE_URL","MOVIE","defaultParams","api_key","language","getTrendingMovies","url","options","params","page","axios","response","data","console","log","searchMovieByQuery","query","getMovieById","getMovieCastById","cast"],"sourceRoot":""}